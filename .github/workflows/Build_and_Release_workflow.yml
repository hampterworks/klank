name: Build and Release

on:
  push:
    branches:
      - '**'  # This will trigger on any branch push
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    strategy:
      matrix:
        platform: [windows-latest, ubuntu-latest, macos-latest]
      fail-fast: false

    runs-on: ${{ matrix.platform }}
    name: Build (${{ matrix.platform }})

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 1  # Shallow clone for faster checkout

      - name: Install Windows Build Tools
        if: matrix.platform == 'windows-latest'
        uses: microsoft/setup-msbuild@v1.1

      - name: Install Linux Dependencies
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y --no-install-recommends \
            libgtk-3-dev \
            libwebkit2gtk-4.1-dev \
            librsvg2-dev \
            patchelf \
            libglib2.0-dev \
            build-essential \
            libssl-dev \
            libayatana-appindicator3-dev

      - name: Setup Node and Yarn
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'yarn'

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'windows-latest' && 'x86_64-pc-windows-msvc' || matrix.platform == 'macos-latest' && 'x86_64-apple-darwin' || 'x86_64-unknown-linux-gnu' }}

      # Cache Rust dependencies
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true

      - name: Install Dependencies
        run: |
          corepack enable
          yarn install --frozen-lockfile --prefer-offline
        env:
          YARN_ENABLE_IMMUTABLE_INSTALLS: false

      - name: Build Turbo Repo
        run: yarn build
        continue-on-error: true

      - name: Build Tauri App
        run: yarn tauri build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CARGO_INCREMENTAL: 0
          RUST_BACKTRACE: 0

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-artifacts
          path: |
            **/target/release/bundle/**/*.{msi,deb,dmg}
            **/target/release/bundle/macos/*.app/**/*
          if-no-files-found: warn
          compression-level: 0  # Faster upload, artifacts are already compressed

  release:
    needs: build
    runs-on: ubuntu-latest
    if: success() || failure()
    
    steps:
      - name: Get current date
        id: date
        run: echo "date=$(date +'%Y.%m.%d')" >> $GITHUB_OUTPUT

      - name: Extract branch name
        shell: bash
        run: echo "branch=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT
        id: extract_branch

      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          merge-multiple: true

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: release-${{ steps.date.outputs.date }}-${{ github.run_number }}
          name: Release from ${{ steps.extract_branch.outputs.branch }} (${{ steps.date.outputs.date }})
          draft: false
          prerelease: true
          fail_on_unmatched_files: false
          files: artifacts/**/*.{msi,deb,dmg}
