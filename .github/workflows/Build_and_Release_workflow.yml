name: Build and Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    strategy:
      matrix:
        platform: [windows-latest, ubuntu-latest, macos-latest]

    runs-on: ${{ matrix.platform }}
    name: Build (${{ matrix.platform }})

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Windows-specific setup
      - name: Install Windows Build Tools
        if: matrix.platform == 'windows-latest'
        run: |
          yarn global add windows-build-tools
          yarn global add node-gyp
        shell: powershell

      # Ubuntu-specific setup
      - name: Install Linux Dependencies
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-3-dev \
            libwebkit2gtk-4.1-dev \
            libappindicator3-dev \
            librsvg2-dev \
            patchelf \
            libglib2.0-dev \
            build-essential \
            curl \
            wget \
            file \
            libssl-dev \
            libayatana-appindicator3-dev

      # Setup Node and Yarn
      - name: Setup Node and Yarn
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'yarn'

      # Install Rust with required targets
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'windows-latest' && 'x86_64-pc-windows-msvc' || matrix.platform == 'macos-latest' && 'x86_64-apple-darwin' || 'x86_64-unknown-linux-gnu' }}

      # Setup Yarn properly
      - name: Setup Yarn
        run: |
          corepack enable
          corepack prepare yarn@stable --activate
          yarn --version

      # Install dependencies
      - name: Install Dependencies
        run: |
          yarn install
        env:
          YARN_ENABLE_IMMUTABLE_INSTALLS: false

      - name: Build Turbo Repo
        run: yarn build

      - name: Install Tauri CLI
        run: yarn global add @tauri-apps/cli

      - name: Build Tauri App
        run: yarn tauri build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-artifacts
          path: |
            src-tauri/target/release/klank*
            src-tauri/target/release/bundle/**/*
          if-no-files-found: error

  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          merge-multiple: true

      - name: Display structure of downloaded files
        run: ls -R artifacts/

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      - name: Upload Windows MSI
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/bundle/msi/klank_*_x64_en-US.msi
          asset_name: klank-windows-installer.msi
          asset_content_type: application/x-msi
        if: ${{ hashFiles('./artifacts/bundle/msi/*.msi') }}

      - name: Upload Linux DEB
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/bundle/deb/klank_*.deb
          asset_name: klank-linux.deb
          asset_content_type: application/vnd.debian.binary-package
        if: ${{ hashFiles('./artifacts/bundle/deb/*.deb') }}

      - name: Upload macOS DMG
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/bundle/dmg/klank_*.dmg
          asset_name: klank-macos.dmg
          asset_content_type: application/x-apple-diskimage
        if: ${{ hashFiles('./artifacts/bundle/dmg/*.dmg') }}