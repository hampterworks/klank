name: Build and Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        platform: [windows-latest, ubuntu-latest, macos-latest]

    runs-on: ${{ matrix.platform }}
    name: Build (${{ matrix.platform }})

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Windows dependencies
      - name: Install Windows Dependencies
        if: matrix.platform == 'windows-latest'
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'yarn'

      # Linux dependencies
      - name: Install Linux Dependencies
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf libglib2.0-dev build-essential curl wget file libssl-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev

      # macOS dependencies
      - name: Install macOS Dependencies
        if: matrix.platform == 'macos-latest'
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'yarn'

      # Install Rust if not on Windows (Windows setup-node handles this)
      - name: Install Rust
        if: matrix.platform != 'windows-latest'
        uses: dtolnay/rust-toolchain@stable

      - name: Install Dependencies
        run: yarn install --frozen-lockfile

      - name: Build Turbo Repo
        run: yarn build

      - name: Install Tauri CLI
        run: yarn global add @tauri-apps/cli

      - name: Build Tauri App
        run: yarn tauri build

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-artifacts
          path: |
            src-tauri/target/release/*.exe
            src-tauri/target/release/bundle/msi/*.msi
            src-tauri/target/release/bundle/deb/*.deb
            src-tauri/target/release/bundle/dmg/*.dmg
            src-tauri/target/release/bundle/macos/*.app
          if-no-files-found: ignore

  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          merge-multiple: true

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      - name: Upload Windows EXE
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/your-app-name.exe
          asset_name: your-app-name.exe
          asset_content_type: application/octet-stream
        if: ${{ hashFiles('./artifacts/*.exe') }}

      - name: Upload Windows MSI
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/your-app-name.msi
          asset_name: your-app-name.msi
          asset_content_type: application/octet-stream
        if: ${{ hashFiles('./artifacts/*.msi') }}

      - name: Upload Linux DEB
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/your-app-name.deb
          asset_name: your-app-name.deb
          asset_content_type: application/octet-stream
        if: ${{ hashFiles('./artifacts/*.deb') }}

      - name: Upload macOS DMG
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/your-app-name.dmg
          asset_name: your-app-name.dmg
          asset_content_type: application/octet-stream
        if: ${{ hashFiles('./artifacts/*.dmg') }}