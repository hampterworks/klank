name: Build and Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    strategy:
      matrix:
        platform: [windows-latest, ubuntu-latest, macos-latest]
      # This allows other builds to continue if one fails
      fail-fast: false

    runs-on: ${{ matrix.platform }}
    name: Build (${{ matrix.platform }})

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Windows-specific setup
      - name: Install Windows Build Tools
        if: matrix.platform == 'windows-latest'
        uses: microsoft/setup-msbuild@v1.1

      # Ubuntu-specific setup
      - name: Install Linux Dependencies
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get remove -y libappindicator3-1 libappindicator3-dev
          sudo apt-get install -y \
            libgtk-3-dev \
            libwebkit2gtk-4.1-dev \
            librsvg2-dev \
            patchelf \
            libglib2.0-dev \
            build-essential \
            curl \
            wget \
            file \
            libssl-dev \
            libayatana-appindicator3-dev

      # Setup Node and Yarn
      - name: Setup Node and Yarn
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'yarn'

      # Install Rust with required targets
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'windows-latest' && 'x86_64-pc-windows-msvc' || matrix.platform == 'macos-latest' && 'x86_64-apple-darwin' || 'x86_64-unknown-linux-gnu' }}

      # Setup Yarn properly
      - name: Setup Yarn
        run: |
          corepack enable
          corepack prepare yarn@stable --activate
          yarn --version

      # Install dependencies
      - name: Install Dependencies
        run: |
          yarn install
        env:
          YARN_ENABLE_IMMUTABLE_INSTALLS: false

      - name: Build Turbo Repo
        run: yarn build

      - name: Install Tauri CLI
        run: yarn global add @tauri-apps/cli

      - name: Build Tauri App
        run: yarn tauri build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: List Build Directory (Debug)
        shell: bash
        run: |
          echo "Listing target directory:"
          ls -R src-tauri/target/release/
          echo "Listing bundle directory:"
          ls -R src-tauri/target/release/bundle/ || echo "Bundle directory not found"

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-artifacts
          path: |
            src-tauri/target/release/bundle/**/*.msi
            src-tauri/target/release/bundle/**/*.deb
            src-tauri/target/release/bundle/**/*.dmg
            src-tauri/target/release/bundle/macos/*.app/**/*
            src-tauri/target/release/bundle/dmg/**/*
          if-no-files-found: warn

  release:
    needs: build
    runs-on: ubuntu-latest
    if: success() || failure()  # Run even if some builds fail

    steps:
      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          merge-multiple: true

      - name: Display structure of downloaded files
        run: ls -R artifacts/

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          fail_on_unmatched_files: false
          files: |
            artifacts/**/*.msi
            artifacts/**/*.deb
            artifacts/**/*.dmg
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}